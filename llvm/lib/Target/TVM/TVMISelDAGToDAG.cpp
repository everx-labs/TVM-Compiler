//===-- TVMISelDAGToDAG.cpp - A dag to dag inst selector for TVM ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the TVM target.
//
//===----------------------------------------------------------------------===//

#include "TVM.h"
#include "TVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/Config/llvm-config.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "tvm-isel"

/// TVMDAGToDAGISel - TVM specific code to select TVM machine
/// instructions for SelectionDAG operations.
///
namespace {
class TVMDAGToDAGISel : public SelectionDAGISel {
public:
  TVMDAGToDAGISel(TVMTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

private:
  StringRef getPassName() const override {
    return "TVM DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "TVMGenDAGISel.inc"

  // Main method to transform nodes into machine nodes.
  void Select(SDNode *N) override;

  bool tryIndexedLoad(SDNode *Op);
  bool tryIndexedBinOp(SDNode *Op, SDValue N1, SDValue N2, unsigned Opc8,
                       unsigned Opc16);

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Disp);
};
} // end anonymous namespace

/// createTVMISelDag - This pass converts a legalized DAG into a
/// TVM-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createTVMISelDag(TVMTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new TVMDAGToDAGISel(TM, OptLevel);
}

bool TVMDAGToDAGISel::SelectAddr(SDValue N, SDValue &Base, SDValue &Disp) {
  // TODO: Implement
  return false;
}

bool TVMDAGToDAGISel::tryIndexedLoad(SDNode *N) {
  // TODO: Implement
  return false;
}

bool TVMDAGToDAGISel::tryIndexedBinOp(SDNode *Op, SDValue N1, SDValue N2,
                                      unsigned Opc8, unsigned Opc16) {
  // TODO: Implement
  return false;
}

static const unsigned UntupleTable[] = {
#include "TVMUntupleN.def"
};
static const unsigned UnpackfirstTable[] = {
#include "TVMUnpackfirstN.def"
};

void TVMDAGToDAGISel::Select(SDNode *Node) {
  SDLoc dl(Node);

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  switch (Node->getOpcode()) {
  default:
    break;
  case TVMISD::TUPLE: {
    SmallVector<SDValue, 16> Ops(Node->op_begin(), Node->op_end());
    if (Ops.size() <= 1) {
      SDNode *Res = CurDAG->getMachineNode(TVM::NIL, dl, MVT::TVMTuple);
      ReplaceNode(Node, Res);
      return;
    }

    SDNode *Res = CurDAG->getMachineNode(TVM::TUPLE, dl, MVT::TVMTuple, Ops);
    ReplaceNode(Node, Res);
    return;
  }
  case TVMISD::TUPLEVAR: {
    SmallVector<SDValue, 16> Ops(Node->op_begin(), Node->op_end());
    SDNode *Res = CurDAG->getMachineNode(TVM::TUPLEVAR, dl, MVT::TVMTuple, Ops);
    ReplaceNode(Node, Res);
    return;
  }
  case TVMISD::CALLN: {
    SmallVector<SDValue, 16> Ops(std::next(Node->op_begin()), Node->op_end());
    assert(Ops[0].getOpcode() == TVMISD::GLOBAL_ADDRESS_WRAPPER);
    Ops[0] = Ops[0].getOperand(0); // unwrap the address
    Ops.pop_back();
    auto Chain = Node->getOperand(0);
    Ops.push_back(Chain); // Chain to the end
    SmallVector<EVT, 16> VTs(Node->value_begin(), Node->value_end());
    SDNode *Res =
        CurDAG->getMachineNode(TVM::CALL_N, dl, CurDAG->getVTList(VTs), Ops);
    ReplaceNode(Node, Res);
    return;
  }
  case ISD::INTRINSIC_WO_CHAIN: {
    unsigned IntNo = cast<ConstantSDNode>(Node->getOperand(0))->getZExtValue();
    // Common lambda to process both untupleN and unpackfirstN intrinsics
    auto processUntuple = [&](ArrayRef<unsigned> Table, unsigned CmsSingle,
                              unsigned CmdSmall, unsigned CmdBig) -> bool {
      auto it = llvm::find(Table, IntNo);
      if (it != Table.end()) {
        const auto &Tp = Node->getOperand(1);
        unsigned Sz = it - Table.begin() + 1;
        if (Sz == 1) {
          SDNode *Res = CurDAG->getMachineNode(CmsSingle, dl, MVT::i257, Tp);
          ReplaceNode(Node, Res);
          return true;
        }

        SmallVector<EVT, 16> VTs(Sz, MVT::i257);
        SmallVector<SDValue, 2> Ops;
        Ops.push_back(Tp);

        bool SmallTuple = Sz <= TVMTargetMachine::SmallTupleLimit;
        SDValue SzVal = CurDAG->getTargetConstant(Sz, dl, MVT::i257);
        if (!SmallTuple)
          SzVal = SDValue(
              CurDAG->getMachineNode(TVM::CONST_I257, dl, MVT::i257, SzVal), 0);
        Ops.push_back(SzVal);

        unsigned Cmd = SmallTuple ? CmdSmall : CmdBig;
        SDNode *Res =
            CurDAG->getMachineNode(Cmd, dl, CurDAG->getVTList(VTs), Ops);
        ReplaceNode(Node, Res);
        return true;
      }
      return false;
    };
    // Processing Intrinsic::tvm_untupleN intrinsics
    if (processUntuple(UntupleTable, TVM::UNTUPLE1, TVM::UNTUPLE,
                       TVM::UNTUPLEVAR))
      return;
    if (processUntuple(UnpackfirstTable, TVM::UNPACKFIRST1, TVM::UNPACKFIRST,
                       TVM::UNPACKFIRSTVAR))
      return;
  }
  }

  // Select the default instruction
  SelectCode(Node);
}
