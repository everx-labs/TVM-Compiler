    .internal-alias :main_external,     -1
    .internal-alias :main_internal,     0
    .internal-alias :general_purpose,   1
    .internal-alias :authenticate,      2
    .internal-alias :parse_msg,         3

    .internal-alias :init_fstack,       4
    .internal-alias :store_work_slice_int,  5

    .persistent-base 100
    .global-base 1000000

; ======================================================
; Part 1. Initialization and termination of the contract
; ======================================================

    .selector
    ; s0 - func_id
    ; s1.. - other data
    SETCP0
    DUP
    EQINT 1
    DICTPUSHCONST 32
    ROT
    PUSHCONT {
        DICTIGETJMP
    }
    IFNOTJMP
    PUSHREFCONT
    POPCTR c3
    ROT
    DROP
    DICTIGETJMP
    IFELSE

    .macro authenticate_macro
    ;ref0 must contains auth dictionary
    ;args:
    ;   s0 - body slice
    ;ret:
    ;   s0 - body slice (modified: without ref0)
    ;   s1 - sender pubkey: integer
    ;throws exception if signature cell is missing
    ;throws exception if signature is invalid

    PUSHINT 0
    SWAP
    DUP
    SREMPTY         ;body must have reference, if not - throw exception
    THROWIF 40      ;signature cell not found
    LDREFRTOS       ;detach signature slice
    DUP
    SEMPTY
    PUSHCONT {
        DROP
    }
    PUSHCONT {
        OVER
        HASHSU
        SWAP
        PUSHINT 512
        LDSLICEX
        LDU 256
        DROP
        ;save sender key
        DUP
        POP s5
        ;now check signature
        CHKSIGNU
        THROWIFNOT 40   ;access denied exception
    }
    IFELSE

    .internal   :authenticate
    CALL $authenticate_macro$

    .globl  tvm_sender_pubkey
    .type   tvm_sender_pubkey, @function
tvm_sender_pubkey:
    PUSH c7
    INDEX 2

    .internal   :main_external
    ; s0 - msg body: slice
    ; s1 - msg: cell
    ; s2 - gram balance of msg: int
    ; s3 - gram balance of contract: int

    PUSH s1
    SETGLOB 7

    PUSHCONT {
        CALL $load_macro$
    }
    SETGLOB 13
    PUSHCONT {
        CALL $store_macro$
    }
    SETGLOB 14

    ;check whether the message body is empty
    DUP
    SDEMPTY
    IFRET       ;return if body is empty: that is an initialization message
    ;TODO: implement better reaction on init messages

    ;call signature checker (can throw exception if signature is invalid)
    CALL $authenticate_macro$ ;assume that function returns nothing

    ;call msg parser
    PUSH s2     ;push msg cell on top
    CTOS        ;assume thar parser returns slice - dictionary with msg fields
                ;TODO: use parse_msg
    ;stack: msg_slice body sender_pubkey
    ROT
    ; Initialize C stack
    CALL $init_fstack_macro$

    SWAP
    LDU 32      ;load func id
    LDU 64      ;load timestamp
    SWAP
    SETGLOB 12
    DUP
    CALL $store_work_slice_int_macro$
    SWAP
    CALL 1      ;public method call
    CALL $term_fstack_macro$

    .internal   :main_internal
    ; s0 - msg body: slice
    ; s1 - msg: cell
    ; s2 - gram balance of msg: int
    ; s3 - gram balance of contract: int

    PUSH s1
    SETGLOB 7

    PUSHCONT {
        CALL $load_macro$
    }
    SETGLOB 13
    PUSHCONT {
        CALL $store_macro$
    }
    SETGLOB 14

    ;check whether the message body is empty
    DUP
    SDEMPTY
    IFRET       ;return if body is empty: that is an initialization message

    ;call msg parser
    PUSH s1     ;push msg cell on top
    CTOS        ;assume thar parser returns slice - dictionary with msg fields
                ;TODO: use parse_msg
    ZERO
    ; Initialize C stack
    CALL $init_fstack_macro$

    SWAP
    LDU 32      ;load func id
    DUP
    CALL $store_work_slice_int_macro$
    SWAP
    CALL 1      ;public method call
    CALL $term_fstack_macro$

    .internal   :parse_msg
    CTOS        ;TODO: use parser from contract_api library


; ==========================================
; Part 2. C-specific functionality (runtime)
; ==========================================

; Global variables allocation (allocation of C7 tuple cells)
; GLOB 0 (FIRST)  -- Smart contract info
; GLOB 1 (SECOND) -- Global variables dictionary
; GLOB 2 (THIRD)  -- Public signature
; GLOB 3          -- Reading work slice
; GLOB 4          -- Old spec. Smart contract info (packed into slice)
; GLOB 5          -- BP (frame pointer)
; GLOB 6          -- Writing builder cell

    .globl  :encode_grams
    .type   :encode_grams, @function
:encode_grams:
    ;s0 - value: integer (u64)
    ;s1 - builder
    DUP
    PUSHCONT {
        DUP
        UBITSIZE    ; bit count used by integer
        PUSHINT 8
        DIVC        ; calculate number of bytes needed for integer
        DUP
        PUSH s3     ; push builder
        STU 4       ; store len (bytes)
        SWAP
        PUSHINT 8
        MUL         ; calculate bits for integer (rounded to byte)
        STUX        ; store value
    NIP
    }
    PUSHCONT {
        DROP
        PUSHINT 0
        STUR 4
    }
    IFELSE

    .macro init_fstack_macro
    ; s0 - pubkey
    ;
    ; Initialize stack
    ; At initialization:
    ; 1) C4 contains persistent_data
    ; 2) Dict in C4 at persistent_base + 8 contains dictionary of global data
    ; 3) C7 contains tuple with smart_contract_info as first item
    ;
    ; Result:
    ; 1) C7 contains initialized global memory (see spec above)

    ;
    ; Step 1. Put public key to third (2) global variable
    ; [* _ . _ _ _ _]
    ;
    SETGLOB 2

    ;
    ; Step 2. Load smart_contract_info tuple and pack to slice
    ; c7 initialization state: [* _ * _ . _ _]
    ;
    PUSH c7 FIRST ; (should be GETGLOB 0, but does not work)
    EXPLODE 10  ;unpack tuple

    POP s1      ;drop global config
    DROP        ;drop number of items

    REVERSE 9, 0
    NEWC
    STU 32      ;magic
    STU 16      ;actions
    STU 16      ;msgs_sent
    STU 32      ;unixtime
    STU 64      ;block_lt
    STU 64      ;trans_lt
    STU 256     ;rand_seed
    SWAP
    EXPLODE 2   ;unpack remaining_balance tuple
    DROP DROP   ;drop count and other currency cell
    STGRAMS
    STSLICECONST 0
    STSLICE     ;store myself:MsgAddressInt
    ENDC
    CTOS

    SETGLOB 4   ;Store smart_contract_info slice into GLOB 4

    ;
    ; Step 3. Initialize global vars dictionary
    ; c7 initialization state: [* . * _ * _ _]
    ;
    PUSHINT 108
    PUSH c4                    ; ( persistent_base+8 persistent-dict-cell )
    CTOS
    PLDDICT                    ; ( persistent_base+8 persistent-dict )
    PUSHINT 64                 ; ( persistent_base+8 persistent-dict addr-width )
    DICTIGET                   ; ( global-dict-slice? flag )
    THROWIFNOT 42              ; ( global-dict-slice )
    PLDDICT                    ; ( global-dict )
    SETGLOB 1

    ; Step 4. Initialize BP
    ; c7 initialization state: [* * * _ * . _]
    PUSHINT 1000000000         ; ( new_stack_base_pointer )
    SETGLOB 5

    ; Work slices (fourth (idx 3) and seventh (idx 6) elements of c7)
    ; are initialized on demand

    .internal   :init_fstack
    CALL $init_fstack_macro$

    .macro term_fstack_macro
    ; Terminate stack -- copy values back from C7
    ;
    ; Before termination:
    ; 1) C7 contains a tuple (smart_contract_info, memory dictionary, other data)
    ;
    ; Result:
    ; 1) C7 contains singleton (smart_contract_info);
    ; todo: update
    PUSH c7                    ; ( c7 )
    FIRST                      ; ( sci )
    SINGLE                     ; ( [sci] )
    POP c7                     ; Set c7 to sci singleton

    .globl	:term_fstack
    .type :term_fstack, @function
:term_fstack:
    CALL $term_fstack_macro$

    .macro load_macro
    ; ( addr -- value )
    ; If addr < 100000 --- persistent address
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT { PUSH c4 CTOS PLDDICT }
    PUSHCONT { GETGLOB 1 }
    IFELSE

    PUSHINT 64
    DICTIGET ; (addr dict key-width -- value-slice flag)

    THROWIFNOT 60
    PUSHINT 257 LDIX
    ENDS

    .globl  :load
    .type   :load, @function
:load:
    CALL $load_macro$

    .macro store_macro
    ; (addr val -- )
    NEWC
    PUSHINT 257 STIX
    SWAP          ; (val-b addr)
    DUP           ; (val-b addr addr)
    PUSHINT 100000
    LESS          ; (val-b addr persistent?)
    PUSHCONT {
        PUSH c4
        CTOS      ; (val-b addr dict-slice)
        PLDDICT   ; (val-b addr dict)
        PUSHINT 64
        DICTISETB ; (val-b addr dict key-width -- dict')
        NEWC STDICT ENDC
        POP c4
    }
    PUSHCONT {
        GETGLOB 1   ; ( val-b addr -- val-b addr dict )
        PUSHINT 64  ; ( val-b addr dict key-width )
        DICTISETB   ; ( val-b addr dict key-width -- c7 dict')
        SETGLOB 1
    }
    IFELSE

    .globl  :store
    .type   :store, @function
:store:
    CALL $store_macro$

    .globl  :load_slice
    .type   :load_slice, @function
:load_slice:
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT { PUSH c4 CTOS PLDDICT }
    PUSHCONT { GETGLOB 1 }
    IFELSE
    PUSHINT 64
    DICTIGET
    THROWIFNOT 61

    .globl  :store_slice
    .type   :store_slice, @function
:store_slice:
    XCHG s0, s1
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT {
        PUSH c4
        CTOS
        PLDDICT
        PUSHINT 64
        DICTISET
        NEWC
        STDICT
        ENDC
        POP c4
    }
    PUSHCONT {
        GETGLOB 1
        PUSHINT 64
        DICTISET
        SETGLOB 1
    }
    IFELSE

    .globl  :load_builder
    .type   :load_builder, @function
:load_builder:
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT { PUSH c4 CTOS PLDDICT }
    PUSHCONT { GETGLOB 1 }
    IFELSE
    PUSHINT 64
    DICTIGET
    THROWIFNOT 62
    NEWC
    STSLICE

    .globl  :store_builder
    .type   :store_builder, @function
:store_builder:
    ENDC
    CTOS
    XCHG s0, s1
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT {
        PUSH c4
        CTOS
        PLDDICT
        PUSHINT 64
        DICTISET
        NEWC
        STDICT
        ENDC
        POP c4
    }
    PUSHCONT {
        GETGLOB 1
        PUSHINT 64
        DICTISET
        SETGLOB 1
    }
    IFELSE

    .globl  :load_cell
    .type   :load_cell, @function
:load_cell:
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT { PUSH c4 CTOS PLDDICT }
    PUSHCONT { GETGLOB 1 }
    IFELSE
    PUSHINT 64
    DICTIGET
    THROWIFNOT 63
    NEWC
    STSLICE
    ENDC

    .globl  :store_cell
    .type   :store_cell, @function
:store_cell:
    CTOS
    XCHG s0, s1
    DUP
    PUSHINT 100000
    LESS
    PUSHCONT {
        PUSH c4
        CTOS
        PLDDICT
        PUSHINT 64
        DICTISET
        NEWC
        STDICT
        ENDC
        POP c4
    }
    PUSHCONT {
        GETGLOB 1
        PUSHINT 64
        DICTISET
        SETGLOB 1
    }
    IFELSE

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; User-level functions and constants ;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;
    ; Get writing builder
    ; ( -- cell-of-builder )
    ;
    .globl  load_work_slice
    .type   load_work_slice, @function
load_work_slice:
    GETGLOB 6
    ENDC

    ;
    ; Set reading builder cell (internal call)
    ; ( builder-cell -- )
    ;
    .macro store_work_slice_int_macro
    SETGLOB 3

    .internal	:store_work_slice_int
    CALL $store_work_slice_int_macro$

    ;
    ; Initialize work cell with smart contract info
    ;
    .globl	tonstdlib_get_smart_contract_info
    .type	tonstdlib_get_smart_contract_info,@function
tonstdlib_get_smart_contract_info:
    GETGLOB 4
    SETGLOB 3

    ;
    ; Initialize writing builder
    ; ( -- )
    ;
    .globl	tonstdlib_create_empty_work_slice
    .type	tonstdlib_create_empty_work_slice,@function
tonstdlib_create_empty_work_slice:
    NEWC
    SETGLOB 6

    ;
    ; Append work cell with an integer:
    ; ( int-value width -- )
    ;
    .globl	tonstdlib_work_slice_store_int
    .type	tonstdlib_work_slice_store_int,@function
tonstdlib_work_slice_store_int:
;    GETGLOB 3                  ; ( int-value width work-slice )
;    NEWC STSLICE               ; ( uint-value width work-cell-builder )
;    SWAP                       ; ( uint-value work-cell-builder width )
;    STIX                       ; ( work-cell-builder' )
;    ENDC                       ; ( work-cell )
;    CTOS                       ; ( work-slice )
;    SETGLOB 3

    GETGLOB 6                  ; ( int-value width work-builder )
    SWAP                       ; ( int-value work-builder width )
    STIX                       ; ( work-builder' )
    SETGLOB 6                  ; ( )


    ;
    ; Append work cell with an unsigned integer:
    ; ( uint-value width -- )
    ;
    .globl	tonstdlib_work_slice_store_uint
    .type	tonstdlib_work_slice_store_uint,@function
tonstdlib_work_slice_store_uint:
;    GETGLOB 3                  ; ( uint-value width work-slice )
;    NEWC STSLICE               ; ( uint-value width work-cell-builder )
;    SWAP                       ; ( uint-value work-cell-builder width )
;    STUX                       ; ( work-cell-builder )
;    ENDC                       ; ( work-cell )
;    CTOS                       ; ( work-slice )
;    SETGLOB 3

    GETGLOB 6                  ; ( uint-value width work-builder )
    SWAP                       ; ( uint-value work-builder width )
    STUX                       ; ( work-builder' )
    SETGLOB 6                  ; ( )

    ;
    ; Load integer from work cell:
    ; ( width -- int-value )
    ;
    .globl	tonstdlib_work_slice_load_int
    .type	tonstdlib_work_slice_load_int,@function
tonstdlib_work_slice_load_int:
    GETGLOB 3                  ; ( width work-slice )
    SWAP                       ; ( work-slice width )
    LDIX                       ; ( int-value work-slice' )
    SETGLOB 3

    ;
    ; Load unsigned from work cell:
    ; ( width -- uint-value )
    ;
    .globl	tonstdlib_work_slice_load_uint
    .type	tonstdlib_work_slice_load_uint,@function
tonstdlib_work_slice_load_uint:
    GETGLOB 3                  ; ( width work-slice )
    SWAP                       ; ( work-slice width )
    LDUX                       ; ( int-value work-slice' )
    SETGLOB 3

    ;
    ; Get builder cell
    ; ( -- builder-cell )
    ;
    .globl	tonstdlib_get_work_slice
    .type	tonstdlib_get_work_slice,@function
tonstdlib_get_work_slice:
    GETGLOB 6
    ENDC

    ;
    ; Send raw message: takes message from work slice
    ; ( flags -- )
    ;
    .globl	tonstdlib_send_work_slice_as_rawmsg
    .type	tonstdlib_send_work_slice_as_rawmsg,@function
tonstdlib_send_work_slice_as_rawmsg:
    GETGLOB 6
    ENDC
    SWAP
    SENDRAWMSG

    ;;;;;;;;;;;;;;;;;;;;;
    ; Std library for C ;
    ;;;;;;;;;;;;;;;;;;;;;

    ;
    ;
    ;
	.text
	.file	"memcpy-test.c"
	.globl	memcpy
	.p2align	1
	.type	memcpy,@function
memcpy:                  ; { dst | src | size | - }
    PUSH s2              ; { dst | src | size | dst | - }
    ROLLREV 2            ; { dst | dst | src | size | - }
    PUSHCONT {         ; { dst | dst' | src' | - }
        DUP2             ; { dst | dst' | src' | dst' | src' | - }
        CALL $:load$  ; { dst | dst' | src' | dst' | value | - }
        CALL $:store$ ; { dst | dst' | src' | - }

        INC              ; { dst | dst' | src'++ | - }
        SWAP             ; { dst | src' | dst' | - }
        INC              ; { dst | src' | dst'++ | - }
        SWAP             ; { dst | dst' | src' | - }
    }                  ; { dst | dst | src | size | cont | - }
    REPEAT               ; { dst | dst | src | size | cont | - } => { dst | dst | src | - }
    DROP2                ; { dst }
    RET

.Lfunc_end0:
	.size	memcpy, .Lfunc_end0-memcpy

     .globl	memset
     .type	memset,@function
memset:
     ; ( addr value size -- addr )
     ;
     PUSH s2              ; ( addr value size addr )
     XCHG s0,s1           ; ( addr value addr size )
     PUSHCONT {           ; ( addr value addr -- value addr' )
         PUSH s0          ; ( addr value addr' addr' )
         PUSH s2          ; ( addr value addr' addr' value )
         CALL $:store$
         INC              ; ( addr value (addr' = addr' + 1) )
     }
     REPEAT               ; ( addr value addr size cont -- addr value addr' )
     DROP2                ; ( addr )
     RET

